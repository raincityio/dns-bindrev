#!/usr/bin/env python3.7

import os
import json
import time
import signal
import asyncio
import logging
import dns.message
import dns.rdatatype
import ipaddress
import aiomysql
import dnstap_client
import argparse

default_config_file = "%s/.bindrev.json" % os.path.expanduser('~')

class BufferedDb:

    def __init__(self, db):
        self.db = db
        self.cache = {}
        self.updates = {}

    async def get(self, ip):
        if ip in self.updates:
            return self.updates[ip]
        elif ip in self.cache:
            return self.cache[ip]
        else:
            domain = await self.db.get(ip)
            if domain is not None:
                if not ip in self.cache:
                    self.cache[ip] = domain
            return domain

    async def set_all(self, items):
        for (ip, domain) in items:
            if ip in self.cache:
                cached = self.cache[ip]
                if domain == cached:
                    if ip in self.updates:
                        del self.updates[ip]
                else:
                    self.updates[ip] = domain
            else:
                self.updates[ip] = domain

    async def flush(self):
        items = list(self.updates.items())
        await self.db.set_all(items)
        for (ip, update) in items:
            self.cache[ip] = update
            if ip in self.updates:
                if self.updates[ip] == update:
                    del self.updates[ip]

class MyDb:

    def __init__(self, host, db, user, password):
        self.host = host
        self.db = db
        self.user = user
        self.password = password
        self.pool = None

    async def close(self):
        if self.pool is not None:
            self.pool.close()
            await self.pool.wait_closed()

    async def __getpool__(self):
        if self.pool is None:
            self.pool = await aiomysql.create_pool(
                    host=self.host, port=3306, user=self.user,
                    password=self.password, db=self.db, echo=True)
        return self.pool

    async def get(self, ip):
        pool = await self.__getpool__()
        async with pool.acquire() as conn:
            async with conn.cursor() as curs:
                return await self._get(curs, ip)

    async def _get(self, curs, ip):
        await curs.execute("SELECT domain FROM ips WHERE ip = %s AND latest = TRUE", (str(ip),))
        results = await curs.fetchall()
        if len(results) == 0:
            return None
        return results[0][0]

    async def set_all(self, items):
        start = time.time()
        if len(items) != 0:
            pool = await self.__getpool__()
            async with pool.acquire() as conn:
                async with conn.cursor() as curs:
                    await self._set_all(curs, items)
                await conn.commit()
        stop = time.time()
        logging.debug("set_all(size=%s): %s" % (len(items), stop - start))

    async def _set_all(self, curs, items):
        for (ip, domain) in items:
            await curs.execute("SELECT id, latest FROM bindrev.ips WHERE ip = %s AND domain = %s", (str(ip), domain,))
            results = await curs.fetchall()
            update_others = False
            if len(results) == 0:
                await curs.execute("INSERT INTO bindrev.ips (ip, domain, latest) VALUES (%s, %s, TRUE)", (str(ip), domain,))
                update_others = True
            elif len(results) == 1:
                _id = results[0][0]
                latest = results[0][1]
                if latest == False:
                    await curs.execute("UPDATE bindrev.ips SET latest = TRUE WHERE id = %s" % (_id,))
                    update_others = True
            else:
                raise Exception("unexpected result count")
            if update_others:
                await curs.execute("UPDATE bindrev.ips SET latest = FALSE WHERE ip = %s AND domain <> %s", (str(ip), domain,))
     
class ReverseLookup:

    def __init__(self, db):
        self.db = db

    async def set_all(self, items):
        for (ip, domain) in items:
            current = await self.db.get(ip)
            if current is None:
                logging.debug("Creating %s -> %s" % (ip, domain))
                await self.db.set_all([(ip, domain,)])
            else:
                if current == domain:
                    logging.debug("Keeping %s[%s] -> %s" % (ip, current, domain))
                else:
                    logging.debug("Updating %s[%s] -> %s" % (ip, current, domain))
                    await self.db.set_all([(ip, domain,)])

    async def get(self, ip):
        return await self.db.get(ip)

class BindrevServer:

    test_ip = ipaddress.ip_address('127.0.0.1')
    test_domain = 'localhost.'

    def __init__(self, lookup, host='0.0.0.0', port=8888):
        self.lookup = lookup
        self.host = host
        self.port = port

    async def start(self):
        async def handle(reader, writer):
            try:
                while True:
                    ip_sz = int.from_bytes(await reader.readexactly(1), byteorder='big')
                    if ip_sz == 0:
                        writer.write((0).to_bytes(1, byteorder='big'))
                        break
                    ip = ipaddress.ip_address(await reader.readexactly(ip_sz))
                    if ip == BindrevServer.test_ip:
                        domain = BindrevServer.test_domain
                    else:
                        domain = await self.lookup.get(ip)
                    if domain is None:
                        writer.write((0).to_bytes(1, byteorder='big'))
                    else:
                        domain_sz = len(domain).to_bytes(1, byteorder='big')
                        writer.write(domain_sz)
                        writer.write(domain.encode('utf-8'))
            finally:
                writer.close()

        await asyncio.start_server(handle, self.host, self.port)

async def main():
    logging.basicConfig(level=logging.DEBUG, format='%(asctime)s [%(levelname)s]: %(message)s')

    parser = argparse.ArgumentParser()
    parser.add_argument('-c', default=default_config_file, help='config file')
    args = parser.parse_args()

    with open(args.c, 'r') as infile:
        config = json.load(infile)

    my_host = config['my_host']
    my_db = config['my_db']
    my_user = config['my_user']
    my_password = config['my_password']
    mydb = MyDb(my_host, my_db, my_user, my_password)

    bdb = BufferedDb(mydb)
    async def flusher():
        while True:
            await asyncio.sleep(5)
            try:
                await bdb.flush()
            except asyncio.CancelledError:
                raise
            except Exception as e:
                logging.error(e)
    flusher_task = asyncio.create_task(flusher())

    lookup = ReverseLookup(bdb)

    async def tapper_callback(domain, ip):
        await lookup.set_all([(ip, domain)])

    tapper = dnstap_client.Tapper(tapper_callback)
    asyncio.create_task(tapper.loop())

    server = BindrevServer(lookup)
    await server.start()

    finish = asyncio.Event()
    def signal_handler(*args):
        finish.set()
    loop = asyncio.get_event_loop()
    loop.add_signal_handler(signal.SIGINT, signal_handler)
    loop.add_signal_handler(signal.SIGTERM, signal_handler)

    await finish.wait()
    flusher_task.cancel()
    await asyncio.wait([flusher_task])
    await bdb.flush()
    await mydb.close()

if __name__ == "__main__":
    asyncio.run(main())
